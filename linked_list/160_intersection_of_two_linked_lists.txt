# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        # double traverse
        if not headA or not headB:
            return None
        p1 = headA
        p2 = headB
        while p1 or p2:
            if p1 == p2:
                return p1
            if not p1:
                p1 = headB
                p2 = p2.next
            elif not p2:
                p2 = headA
                p1 = p1.next
            else:
                p1 = p1.next
                p2 = p2.next
        
        # truncate
        p1 = headA
        p2 = headB
        l1 = 0
        l2 = 0
        while p1:
            l1 += 1
            p1 = p1.next
        while p2:
            l2 += 1
            p2 = p2.next
        p1, p2 = headA, headB
        if l1 >= l2:
            for i in range(l1 - l2):
                p1 = p1.next
        else:
            for i in range(l2 - l1):
                p2 = p2.next
        while p1:
            if p1 == p2:
                return p1
            p1 = p1.next
            p2 = p2.next
        return None