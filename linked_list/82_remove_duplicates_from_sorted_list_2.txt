# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        # Sentinel Head + Predecessor
        dummy = ListNode(float('-inf'), head)
        prev = dummy
        cur = head
        while cur and cur.next:
            if cur.val == cur.next.val:
                while cur.next and cur.val == cur.next.val:
                    cur = cur.next
                prev.next = cur = cur.next
            else:
                prev, cur = prev.next, cur.next
        return dummy.next
        
        # stack
        stack = []
        dummy = ListNode(0)
        while head:
            if stack and stack[-1].val == head.val:
                cur_dup = head.val
                stack.pop()
                while head and head.val == cur_dup:
                    head = head.next
            else:
                stack.append(head)
                head = head.next
        while stack:
            cur_node = stack.pop()
            dummy.next, cur_node.next = cur_node, dummy.next
        return dummy.next