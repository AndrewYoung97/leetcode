class Solution:
    def longestPalindrome(self, s: str) -> str:
        # dp
        rst = s[0]
        dp = [[False] * len(s) for i in range(len(s))]
        for i in range(len(s)):
            dp[i][i] = True
        for i in range(len(s) - 1, -1, -1):
            for j in range(i + 1, len(s)):
                if s[i] == s[j]:
                    if j == i + 1:
                        dp[i][j] = True
                    else:
                        dp[i][j] = True and dp[i + 1][j - 1]
                    if dp[i][j] and j - i + 1 > len(rst):
                        rst = s[i : j + 1]
        return rst
        
        # expand around center
        def getPalindrome(l, r):
            while l >= 0 and r < len(s) and s[l] == s[r]:
                l -= 1
                r += 1
            return s[l + 1: r]
        rst = s[0]
        for i in range(len(s)-1):
            p1 = getPalindrome(i, i + 1)
            p2 = getPalindrome(i,i)
            rst = max([rst, p1, p2], key=lambda x : len(x))
        return rst