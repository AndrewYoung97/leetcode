class Solution:
    # recursive
    def numDecodings(self, s: str) -> int:
        return self.helper(0, s)
    
    @lru_cache(maxsize=None)
    def helper(self, idx, s):
        if idx == len(s):
            return 1
        if s[idx] == '0':
            return 0
        if idx == len(s) - 1:
            return 1
        if int(s[idx:idx+2]) <= 26:
            return self.helper(idx + 1, s) + self.helper(idx + 2, s)
        else:
            return self.helper(idx + 1, s)
    
    # dp
    def numDecodings(self, s: str) -> int:
        dp = [0] * (1 + len(s))
        dp[len(s)] = 1
        if s[len(s) - 1] != '0':
            dp[len(s) - 1] = 1
        for i in range(len(s) - 2, -1, -1):
            if s[i] != '0':
                if int(s[i:i+2]) <= 26:
                    dp[i] = dp[i + 1] + dp[i + 2]
                else:
                    dp[i] = dp[i + 1]
        return dp[0]