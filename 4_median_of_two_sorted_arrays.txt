class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        m, n = len(nums1), len(nums2)
        l, r = 0, m
        i = l + (r - l) // 2
        j = (m + n) // 2 - i
        odd = (m + n) % 2
        while 0 < i < m and 0 < j < n:
            if nums1[i - 1] <= nums2[j] and nums1[i] >= nums2[j - 1]:
                if odd:
                    return float(min(nums1[i], nums2[j]))
                return float((min(nums1[i], nums2[j]) + max(nums1[i - 1], nums2[j - 1])) / 2)
            elif nums1[i - 1] > nums2[j]:
                r = i
            else:
                l = i + 1
            i = l + (r - l) // 2
            j = (m + n) // 2 - i
        if m == 0:
            if odd:
                return float(nums2[j])
            return float((nums2[j] + nums2[j - 1]) / 2)
        if i == 0:
            i = 0 if nums1[0] >= nums2[j - 1] else 1
            j = j if nums1[0] >= nums2[j - 1] else j - 1
        if i == 0:
            if j == n:
                return float((nums1[i] + nums2[j - 1]) / 2)
            if odd:
                return float(min(nums1[i], nums2[j]))
            return float((min(nums1[i], nums2[j]) + nums2[j - 1]) / 2)
        if i == m:
            if odd:
                return float(nums2[j])
            if j == 0:
                return float((nums1[i - 1] + nums2[j]) / 2) 
            return float((nums2[j] + max(nums1[i - 1], nums2[j - 1])) / 2)