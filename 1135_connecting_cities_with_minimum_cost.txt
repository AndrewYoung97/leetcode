class Solution:
    def minimumCost(self, n: int, connections: List[List[int]]) -> int:
        weights = [1] * (n + 1)
        parents = [x for x in range(n + 1)]
        def find(node):
            while node != parents[node]:
                parents[node] = parents[parents[node]]
                node = parents[node]
            return node
        
        def union(node1, node2):
            root1 = find(node1)
            root2 = find(node2)
            if root1 == root2:
                return False
            if weights[root1] >= weights[root2]:
                parents[root2] = root1
                weights[root1] += weights[root2]
            else:
                parents[root1] = root2
                weights[root2] += weights[root1]
            return True
        
        connections.sort(key=lambda x : x[2])
        rst = 0
        edge_count = 0
        for edge in connections:
            if union(edge[0], edge[1]):
                rst += edge[2]
                edge_count += 1
        if edge_count == n - 1:
            return rst
        return -1