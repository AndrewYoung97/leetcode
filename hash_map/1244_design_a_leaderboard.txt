from sortedcontainers import SortedDict

class Leaderboard:

    def __init__(self):
        self.score_to_id = SortedDict()
        self.id_to_score = {}

    def addScore(self, playerId: int, score: int) -> None:
        if playerId not in self.id_to_score:
            self.score_to_id[-score] = self.score_to_id.get(-score, 0) + 1
            self.id_to_score[playerId] = -score
        else:
            old_score = self.id_to_score[playerId]
            self.score_to_id[old_score] -= 1
            self.score_to_id[-score + old_score] = self.score_to_id.get(-score + old_score, 0) + 1
            self.id_to_score[playerId] = -score + old_score
        

    def top(self, K: int) -> int:
        count = 0
        score_sum = 0
        for s, c in self.score_to_id.items():
            if count + c >= K:
                score_sum += s * (K - count)
                break
            else:
                score_sum += s * c
                count += c
        return -score_sum

    def reset(self, playerId: int) -> None:
        score = self.id_to_score[playerId]
        self.score_to_id[score] -= 1
        self.id_to_score.pop(playerId)


# Your Leaderboard object will be instantiated and called as such:
# obj = Leaderboard()
# obj.addScore(playerId,score)
# param_2 = obj.top(K)
# obj.reset(playerId)