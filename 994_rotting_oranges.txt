class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        stack = []
        rst = 0
        seen = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    stack.append((i, j))
                    seen.add((i, j))
        while stack:
            new_stack = []
            while stack:
                cur_node = stack.pop()
                if cur_node[0] > 0 and (cur_node[0] - 1, cur_node[1]) not in seen and grid[cur_node[0] - 1][cur_node[1]] == 1:
                    seen.add((cur_node[0] - 1, cur_node[1]))
                    new_stack.append((cur_node[0] - 1, cur_node[1]))
                    grid[cur_node[0] - 1][cur_node[1]] = 2
                if cur_node[0] < len(grid) - 1 and (cur_node[0] + 1, cur_node[1]) not in seen and grid[cur_node[0] + 1][cur_node[1]] == 1:
                    seen.add((cur_node[0] + 1, cur_node[1]))
                    new_stack.append((cur_node[0] + 1, cur_node[1]))
                    grid[cur_node[0] + 1][cur_node[1]] = 2
                if cur_node[1] > 0 and (cur_node[0], cur_node[1] - 1) not in seen and grid[cur_node[0]][cur_node[1] - 1] == 1:
                    seen.add((cur_node[0], cur_node[1] - 1))
                    new_stack.append((cur_node[0], cur_node[1] - 1))
                    grid[cur_node[0]][cur_node[1] - 1] = 2
                if cur_node[1] < len(grid[0]) - 1 and (cur_node[0], cur_node[1] + 1) not in seen and grid[cur_node[0]][cur_node[1] + 1] == 1:
                    seen.add((cur_node[0], cur_node[1] + 1))
                    new_stack.append((cur_node[0], cur_node[1] + 1))
                    grid[cur_node[0]][cur_node[1] + 1] = 2
            if new_stack:
                rst += 1
            stack = new_stack
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1
        return rst