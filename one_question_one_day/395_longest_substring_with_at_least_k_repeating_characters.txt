class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        # divide and conquer
        for c in s:
            if s.count(c) < k:
                return max(self.longestSubstring(sub, k) for sub in s.split(c))
        return len(s)
        
        # sliding window (slow)
        max_uni = len(set(s))
        result = 0
        for i in range(max_uni):
            cur_dict = {}
            l = 0
            r = 0
            at_least_K = 0
            while r < len(s):
                cur_dict[s[r]] = cur_dict.get(s[r], 0) + 1 
                if cur_dict[s[r]] == k:
                    at_least_K += 1
                if len(cur_dict.keys()) == i + 1 and at_least_K == i + 1:
                    result = max(result, r - l + 1)
                if len(cur_dict.keys()) > i + 1:
                    while l <= r:
                        cur_dict[s[l]] -= 1
                        if cur_dict[s[l]] == k - 1:
                            at_least_K -= 1
                        if cur_dict[s[l]] == 0:
                            del cur_dict[s[l]]
                            l += 1
                            break
                        l += 1
                r += 1
        return result