class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        # two sum
        def twoSum(nums, cur, rst):
            low = 0
            high = len(nums) - 1
            while low < high:
                if nums[low] + nums[high] < -cur:
                    low += 1
                elif nums[low] + nums[high] > -cur:
                    high -= 1
                else:
                    rst.append([cur, nums[low], nums[high]])
                    low += 1
                    high -= 1
                    while low < high and nums[low] == nums[low - 1]:
                        low += 1
        
        if not nums:
            return []
        nums.sort()
        rst = []
        twoSum(nums[1:], nums[0], rst)
        for i in range(1, len(nums)):
            if nums[i] > 0:
                break
            if nums[i] != nums[i - 1]:
                twoSum(nums[i+1:], nums[i], rst)
        return rst
    
        # no-sort
        rst, dup = set(), set()
        seen = {}
        for i, val1 in enumerate(nums):
            if val1 not in dup:
                dup.add(val1)
                for val2 in nums[i+1:]:
                    rest = -val1 - val2
                    if rest in seen and seen[rest] == i:
                        rst.add(tuple(sorted([val1, val2, rest])))
                    seen[val2] = i
        return rst