class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # find pivot
        def binarySearch(nums, target):
            l = 0
            r = len(nums) - 1
            mid = l + (r - l) // 2
            while l <= r:
                if nums[mid] == target:
                    return mid
                elif nums[mid] > target:
                    r = mid - 1
                else:
                    l = mid + 1
                mid = l + (r - l) // 2
            return -1
        
        l = 0
        r = len(nums) - 1
        mid = l + (r - l) // 2
        while mid != l:
            if nums[mid] < nums[r]:
                r = mid
            elif nums[mid] > nums[l]:
                l = mid
            mid = l + (r - l) // 2
        mid += 1
        rst = binarySearch(nums[:mid], target)
        if rst != -1:
            return rst
        rst = binarySearch(nums[mid:], target)
        if rst != -1:
            return rst + mid
        return -1
        
        # one-pass
        l = 0
        r = len(nums) - 1
        while l <= r:
            mid = l + (r - l) // 2
            if nums[mid] == target:
                return mid
            if nums[mid] >= nums[l]:
                if nums[mid] > target and target >= nums[l]:
                    r = mid - 1
                elif nums[mid] > target and target < nums[l]:
                    l = mid + 1
                elif nums[mid] < target:
                    l = mid + 1
            else:
                if nums[mid] < target and target <= nums[r]:
                    l = mid + 1
                elif nums[mid] < target and target > nums[r]:
                    r = mid - 1
                elif nums[mid] > target:
                    r = mid - 1
        return -1