class Word:
    def __init__(self, freq, word):
        self.freq = freq
        self.word = word
    
    def __lt__(self, other):
        if self.freq == other.freq:
            return self.word > other.word
        return self.freq < other.freq
    
    def __eq__(self, other):
        return self.freq == other.freq and self.word == other.word
    
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_count = collections.Counter(words)
        k_heap = []
        for word, c in word_count.items():
            if len(k_heap) == k:
                heapq.heappushpop(k_heap, Word(c, word))
            else:
                heapq.heappush(k_heap, Word(c, word))
        return [heappop(k_heap).word for i in range(k)][::-1]