class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def helper(nums, target):
            dup, rst = set(), set()
            seen = {}
            for i in range(len(nums)):
                if nums[i] * 3 > target:
                    break
                if nums[i] not in dup:
                    dup.add(nums[i])
                    for j in range(i + 1, len(nums)):
                        if seen.get(target - nums[i] - nums[j], -1) == i:
                            rst.add(tuple([nums[i], target - nums[i] - nums[j], nums[j]]))
                        seen[nums[j]] = i
            return rst
        
        nums.sort()
        rst = []
        for i in range(len(nums) - 3):
            if nums[i] * 4 > target:
                break
            if i != 0 and nums[i] == nums[i - 1]:
                continue
            three_sum_rst = helper(nums[i + 1:], target - nums[i])
            for s in three_sum_rst:
                rst.append([nums[i]] + list(s))
        return rst
        
        # could do in recursive way