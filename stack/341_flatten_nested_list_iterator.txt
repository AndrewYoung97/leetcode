class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.stack = [[nestedList, 0]]
    
    def next(self) -> int:
        self.helper()
        rst = self.stack[-1][0][self.stack[-1][1]]
        self.stack[-1][1] += 1
        return rst
        
    def hasNext(self) -> bool:
        self.helper()
        return len(self.stack) > 0
    
    def helper(self):
        while self.stack:
            cur_idx = self.stack[-1][1]
            cur_list = self.stack[-1][0]
            if cur_idx == len(cur_list):
                self.stack.pop()
                continue
            if cur_list[cur_idx].isInteger():
                break
            self.stack.append([cur_list[cur_idx].getList(), 0])
            self.stack[-2][1] += 1